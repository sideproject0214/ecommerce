upstream client {
  server client:5173; 
}

upstream api {
  server api:8080;
}

server {
  listen 80 default_server;
  listen [::]:80 default_server;
# 호스트 이름을 지정한다. 가상 호스트가 있는 경우 해당 호스트명을 써넣으면 된다. 만약 로컬에서 작업하고 있는 
# 내용을 nginx를 통해 띄우려고 하는 경우에는 localhost라고 적으면 된다.
  server_name 172.17.0.1;

  # 로그설정
  # access_log /var/log/nginx/${server}/access.log;
  # error_log /var/log/nginx/${server}/error.log;
     
  access_log off;
  log_not_found off;
  error_log /var/log/nginx/error.log crit;

  # 프록시 패스 설정
  location / {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass  http://client;
    # try_files $uri 

    # proxy_http_version 1.1; # 기본 1.0
    # # 웹소켓 사용 설정
    # proxy_set_header Connection 'upgrade';
    # proxy_set_header Upgrade $http_upgrade;

    # # 응답을 캐쉬로부터 가져오지 않는다는 조건
    # proxy_cache_bypass $http_upgrade;

    proxy_buffer_size          128k;
    proxy_buffers              4 256k;
    proxy_busy_buffers_size    256k;
  }

  location ^~ /api {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_pass http://api;
    # default_type application/json;
  }
  
}

# 1. = (exactly), 정확히 일치할 경우
# ex) location = /

# 2. ^~ (priority prefix match), 우선 순위를 부여하고, 앞 부분이 일치할 경우. 여러 개가 충돌할 경우 긴 것이 적용(longest first)
# ex) location ^~ /api

# 3. ~ (regex match with sensitive case), 대소문자를 구분하는 정규표현식 일치할 경우
# ex) location ~ /path

# 4. *~ (regex math with insensitive case), 대소문자를 무시하는 정규표현식 일치할 경우
# ex) location *~ /path

# 5. / (prefix match), 앞 부분이 일치할 경우, 여러 개가 충돌할 경우 긴 것이 적용(longest first)
# ex) location /

